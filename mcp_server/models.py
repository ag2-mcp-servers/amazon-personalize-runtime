# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T12:58:55+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, SecretStr, conint, constr


class Arn(
    RootModel[constr(pattern=r'arn:([a-z\d-]+):personalize:.*:.*:.+', max_length=256)]
):
    root: constr(pattern=r'arn:([a-z\d-]+):personalize:.*:.*:.+', max_length=256)


class AttributeName(RootModel[constr(pattern=r'[A-Za-z\d_]+', max_length=150)]):
    root: constr(pattern=r'[A-Za-z\d_]+', max_length=150)


class AttributeValue(RootModel[SecretStr]):
    root: SecretStr


class Context(RootModel[Optional[Dict[str, AttributeValue]]]):
    root: Optional[Dict[str, AttributeValue]] = None


class FilterAttributeName(RootModel[constr(pattern=r'[A-Za-z0-9_]+', max_length=50)]):
    root: constr(pattern=r'[A-Za-z0-9_]+', max_length=50)


class FilterAttributeValue(RootModel[SecretStr]):
    root: SecretStr


class FilterValues(RootModel[Optional[Dict[str, FilterAttributeValue]]]):
    root: Optional[Dict[str, FilterAttributeValue]] = None


class InvalidInputException(RootModel[Any]):
    root: Any


class ItemID(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class Name(
    RootModel[
        constr(pattern=r'^[a-zA-Z0-9][a-zA-Z0-9\-_]*', min_length=1, max_length=63)
    ]
):
    root: constr(pattern=r'^[a-zA-Z0-9][a-zA-Z0-9\-_]*', min_length=1, max_length=63)


class NumResults(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class PercentPromotedItems(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class Promotion(BaseModel):
    filterArn: Optional[Arn] = None
    filterValues: Optional[FilterValues] = None
    name: Optional[Name] = None
    percentPromotedItems: Optional[PercentPromotedItems] = None


class PromotionList(RootModel[List[Promotion]]):
    root: List[Promotion] = Field(..., max_length=1)


class RecommendationID(RootModel[str]):
    root: str


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class Score(RootModel[float]):
    root: float


class UserID(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class PersonalizeRankingPostRequest(BaseModel):
    campaignArn: constr(
        pattern=r'arn:([a-z\d-]+):personalize:.*:.*:.+', max_length=256
    ) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the campaign to use for generating the personalized ranking.',
    )
    context: Optional[Dict[str, AttributeValue]] = Field(
        None,
        description="The contextual metadata to use when getting recommendations. Contextual metadata includes any interaction information that might be relevant when getting a user's recommendations, such as the user's current location or device type.",
    )
    filterArn: Optional[
        constr(pattern=r'arn:([a-z\d-]+):personalize:.*:.*:.+', max_length=256)
    ] = Field(
        None,
        description='The Amazon Resource Name (ARN) of a filter you created to include items or exclude items from recommendations for a given user. For more information, see <a href="https://docs.aws.amazon.com/personalize/latest/dg/filter.html">Filtering Recommendations</a>.',
    )
    filterValues: Optional[Dict[str, FilterAttributeValue]] = Field(
        None,
        description='<p>The values to use when filtering recommendations. For each placeholder parameter in your filter expression, provide the parameter name (in matching case) as a key and the filter value(s) as the corresponding value. Separate multiple values for one parameter with a comma. </p> <p>For filter expressions that use an <code>INCLUDE</code> element to include items, you must provide values for all parameters that are defined in the expression. For filters with expressions that use an <code>EXCLUDE</code> element to exclude items, you can omit the <code>filter-values</code>.In this case, Amazon Personalize doesn\'t use that portion of the expression to filter recommendations.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/personalize/latest/dg/filter.html">Filtering Recommendations</a>.</p>',
    )
    inputList: List[ItemID] = Field(
        ...,
        description='A list of items (by <code>itemId</code>) to rank. If an item was not included in the training dataset, the item is appended to the end of the reranked list. The maximum is 500.',
    )
    userId: constr(max_length=256) = Field(
        ...,
        description='The user for which you want the campaign to provide a personalized ranking.',
    )


class RecommendationsPostRequest(BaseModel):
    campaignArn: Optional[
        constr(pattern=r'arn:([a-z\d-]+):personalize:.*:.*:.+', max_length=256)
    ] = Field(
        None,
        description='The Amazon Resource Name (ARN) of the campaign to use for getting recommendations.',
    )
    context: Optional[Dict[str, AttributeValue]] = Field(
        None,
        description="The contextual metadata to use when getting recommendations. Contextual metadata includes any interaction information that might be relevant when getting a user's recommendations, such as the user's current location or device type.",
    )
    filterArn: Optional[
        constr(pattern=r'arn:([a-z\d-]+):personalize:.*:.*:.+', max_length=256)
    ] = Field(
        None,
        description='<p>The ARN of the filter to apply to the returned recommendations. For more information, see <a href="https://docs.aws.amazon.com/personalize/latest/dg/filter.html">Filtering Recommendations</a>.</p> <p>When using this parameter, be sure the filter resource is <code>ACTIVE</code>.</p>',
    )
    filterValues: Optional[Dict[str, FilterAttributeValue]] = Field(
        None,
        description='<p>The values to use when filtering recommendations. For each placeholder parameter in your filter expression, provide the parameter name (in matching case) as a key and the filter value(s) as the corresponding value. Separate multiple values for one parameter with a comma. </p> <p>For filter expressions that use an <code>INCLUDE</code> element to include items, you must provide values for all parameters that are defined in the expression. For filters with expressions that use an <code>EXCLUDE</code> element to exclude items, you can omit the <code>filter-values</code>.In this case, Amazon Personalize doesn\'t use that portion of the expression to filter recommendations.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/personalize/latest/dg/filter.html">Filtering recommendations and user segments</a>.</p>',
    )
    itemId: Optional[constr(max_length=256)] = Field(
        None,
        description='<p>The item ID to provide recommendations for.</p> <p>Required for <code>RELATED_ITEMS</code> recipe type.</p>',
    )
    numResults: Optional[conint(ge=0)] = Field(
        None,
        description='The number of results to return. The default is 25. The maximum is 500.',
    )
    promotions: Optional[List[Promotion]] = Field(
        None,
        description='The promotions to apply to the recommendation request. A promotion defines additional business rules that apply to a configurable subset of recommended items.',
        max_length=1,
    )
    recommenderArn: Optional[
        constr(pattern=r'arn:([a-z\d-]+):personalize:.*:.*:.+', max_length=256)
    ] = Field(
        None,
        description='The Amazon Resource Name (ARN) of the recommender to use to get recommendations. Provide a recommender ARN if you created a Domain dataset group with a recommender for a domain use case.',
    )
    userId: Optional[constr(max_length=256)] = Field(
        None,
        description='<p>The user ID to provide recommendations for.</p> <p>Required for <code>USER_PERSONALIZATION</code> recipe type.</p>',
    )


class GetRecommendationsRequest(BaseModel):
    campaignArn: Optional[Arn] = None
    context: Optional[Context] = None
    filterArn: Optional[Arn] = None
    filterValues: Optional[FilterValues] = None
    itemId: Optional[ItemID] = None
    numResults: Optional[NumResults] = None
    promotions: Optional[PromotionList] = None
    recommenderArn: Optional[Arn] = None
    userId: Optional[UserID] = None


class InputList(RootModel[List[ItemID]]):
    root: List[ItemID]


class PredictedItem(BaseModel):
    itemId: Optional[ItemID] = None
    promotionName: Optional[Name] = None
    score: Optional[Score] = None


class GetPersonalizedRankingRequest(BaseModel):
    campaignArn: Arn
    context: Optional[Context] = None
    filterArn: Optional[Arn] = None
    filterValues: Optional[FilterValues] = None
    inputList: InputList
    userId: UserID


class ItemList(RootModel[List[PredictedItem]]):
    root: List[PredictedItem]


class GetPersonalizedRankingResponse(BaseModel):
    personalizedRanking: Optional[ItemList] = None
    recommendationId: Optional[RecommendationID] = None


class GetRecommendationsResponse(BaseModel):
    itemList: Optional[ItemList] = None
    recommendationId: Optional[RecommendationID] = None
